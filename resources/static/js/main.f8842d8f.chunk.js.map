{"version":3,"sources":["en.js","it.js","helper/Constant.js","helper/Helper.js","ui/SimpleTable.js","api/Api.js","page/Config.js","helper/AccordionHelper.js","ui/ContentDetailModal.js","page/SingleContentList.js","App.js","custom-element/et-single-app.js"],"names":["PERPAGEOPTIONS","SELECT_COLLECTION_TYPE","id","SELECT","NAME","CREATEDBY","lastEdited","CREATEDDATE","T_HEADING","BTN_ADD_NEW_CONTENT","KC_TOKEN_PREFIX","UNIVERSAL_DATE_FORMAT","STRAPI_IMAGE_EXTENSIONS","STRAPI_IMAGE_URL_KEY","STRAPI_EXCLUDE_KEYS","ACCORDION_FONT_SIZE","NO_DATA_AVAILABLE_MSG","getKey","content","keys","Object","index","findIndex","item","toLowerCase","allowedKeys","filter","includes","length","parseData","data","JSON","parse","SimpleTable","props","renderToggleButton","isMenuShown","onClick","type","style","position","height","top","right","border","e","preventDefault","className","onChangeTemplateId","setTemplateId","target","value","state","templateType","selectedTemplateType","this","loadingData","Spinner","loading","size","contentAttribute","map","idx","selectedContent","createdBy","firstname","lastname","moment","Date","updatedAt","format","publishedAt","name","defaultValue","selectedTemplateId","onChange","message","disabled","hidden","templateList","el","templateName","React","Component","Title","createdAt","createDate","selectDefaultTemplate","domain","process","templateBaseUrl","rootAdminEndPoint","localeUrl","sortByCreateDateByDescOrder","STRAPI_TOKEN","getCollectionTypes","a","axios","get","addAuthorizationRequestConfig","getContents","collectionType","page","pageSize","url","getContentById","contentName","contentId","console","error","getLocales","getContentDetailsByCollectionTypeAndId","filterContentsByName","query","searchBy","Error","getTemplate","collectionTypeUrl","getDefaultOptions","defaultBearer","token","window","entando","keycloak","authenticated","localStorage","getItem","headers","Authorization","config","defaultOptions","strapiDomain","Config","componentDidMount","setState","contentTypes","obj","uid","startsWith","isDisplayed","contentTypeRefine","forEach","element","push","label","info","pluralName","parsedCollType","collType","selectedContentId","templatesList","collectionTypes","fetchContentById","event","handleTypeaheadChangeContentType","selected","selectedContentType","option","handleAddNewContent","strapiContentManagerUrl","newWindow","open","focus","nameTwo","bind","xs","title","role","to","bsStyle","marginTop","panelGroupId","renderPanelGroup","PanelGroup","accordion","marginBottom","isImageObject","renderPanel","key","ignoreProps","keyToShow","dataToShow","isAnArray","Number","checkIfComponent","toString","dataObj","arr","split","indexOf","replace","Array","isArray","theKey","theIndex","Panel","eventKey","renderPanelHeading","isObject","renderPanelBody","Heading","renderPanelTitleToggle","renderPanelTitle","Grid","Row","display","fontSize","Col","width","marginLeft","wordBreak","isKey0To9","charAt","toUpperCase","slice","paddingRight","lineHeight","renderAccordionData","toggle","Body","collapsible","undefined","endsWithAnyImageExtension","src","alt","isDate","dateString","endsWith","string","suffix","object","ContentDetailModal","toggleTab","dataToShowOnModal","localizations","getCollectionByLocaleName","currentCode","setActiveTabKey","getLocaleInfo","localeInfo","code","contentDettailsResponse","dataToShowOnModalRestTabs","componentDidUpdate","prevProps","prevState","show","mockRows","selectedCollectionType","collectionAttributes","dummyData","dialogClassName","onHide","Header","fetchTitleOrName","tabIndex","activeKey","activeTabKey","onSelect","locale","getLocaleFullName","overflowY","overflowX","locTabs","i","Footer","SingleContentList","initSingleContentListPage","componentWillUnmount","shouldShowEtSaveBtn","searchBtnClk","pageInput","currPageWillUpdating","doContentSearch","btnVisibility","document","getElementsByClassName","visibility","filterUidByApiPrefix","collectionTypeData","contentDetailsOnModal","contentIdForModal","close","handleCollectionTypeChange","searchByKey","contents","getContentsByCollectionType","setSelectedContentName","contentData","selectedContentName","seletedContentData","results","find","lastPage","pagination","pageCount","totalItems","total","setPage","isNaN","totalPages","newPaginationState","assign","pageChangeValue","onContentSearch","searchQuery","searchResult","handleStateOnTermSearch","handleQueryChange","onPerPageSelect","onPageInput","onSubmit","radioButton","defaultChecked","onPageNavigation","changePageValue","changePage","saveHandler","setContent","setCollectionType","cancelHandler","setSearchBy","setCollectionTypeState","parsedData","collectionTypeApiData","displayName","singularName","perPage","perPageOptions","itemsStart","itemsEnd","Math","min","saveConfigBtn","lg","placeholder","intl","formatMessage","emptyLabel","options","toggleMenu","margin","align","itemCount","viewType","amountOfPages","pageInputValue","onPageSet","onFirstPage","onPreviousPage","onNextPage","onLastPage","messages","sm","injectIntl","App","setLocale","tempId","stringify","currLocale","decideLocale","en","it","path","exact","SingleWidgetElement","reactRootRef","createRef","mountPoint","oldValue","newValue","ReactDOM","render","ref","current","createElement","appendChild","HTMLElement","customElements","define"],"mappings":"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","file":"static/js/main.f8842d8f.chunk.js","sourcesContent":["export default {\n    'app.content': 'Content',\n    'app.info': 'Info',\n    'app.name': 'Name',\n    'app.created': 'Created by',\n    'app.createdDate': 'Created date',\n    'app.selectDefaultTemplate': 'Select default template*',\n    'app.addExistingContent': 'Add existing content',\n    'app.addNewContent': 'Add new content',\n    'app.selectContent': 'Select Content',\n    'app.select': 'Select',\n    'app.selectCollection': 'Select Collection Type',\n    'app.chooseAnOption': 'Choose an option',\n    'app.widgetConfiguration': 'Widget Configuration',\n    'app.queryFilter': 'Query Filter',\n    'app.cancel': 'Cancel',\n    'app.saveAsQuery': 'Save as Query',\n    'app.saveAsListOfContents': 'Save as list of Contents',\n    'app.search': 'Search',\n    'app.lastEdited': 'Last edited',\n    'app.result': 'Result',\n    'app.remove': 'Remove',\n    'app.query': 'Query',\n    'app.selectTemplate': 'Select Template',\n    'app.save': 'Save',\n    'app.edit': 'Edit content',\n    'app.noMatchesFound': 'No matches found',\n    'app.noDataAvailable': 'No data available',\n    'app.firstPage': 'First Page',\n    'app.previousPage': 'Previous Page',\n    'app.currentPage': 'Current Page',\n    'app.nextPage': 'Next Page',\n    'app.lastPage': 'Last Page',\n    'app.perPage': 'per page',\n    'app.of': 'of',\n    'app.ok':'Ok'\n}","export default {\n    'app.content': 'Contenuto',\n    'app.info': 'Informazioni',\n    'app.name': 'Nome',\n    'app.created': 'Creata da',\n    'app.createdDate': 'Data di Creazione',\n    'app.selectDefaultTemplate': 'Seleziona il modello predefinito*',\n    'app.addExistingContent': 'Aggiungi contenuto esistente',\n    'app.addNewContent': 'Aggiungi nuovo contenuto',\n    'app.selectContent': 'Seleziona Contenuto',\n    'app.select': 'Selezionare',\n    'app.selectCollection': 'Seleziona Tipo di raccolta',\n    'app.chooseAnOption': `Scegliere un'opzione`,\n    'app.widgetConfiguration': 'Widget Configuration',\n    'app.queryFilter': 'Filtro di query',\n    'app.cancel': 'Annulla',\n    'app.saveAsQuery': 'Salva come query',\n    'app.saveAsListOfContents': 'Salva come elenco di contenuti',\n    'app.search': 'Ricerca',\n    'app.lastEdited': 'Ultima modifica',\n    'app.result': 'Risultato',\n    'app.remove': 'Rimuovere',\n    'app.query': 'Domanda',\n    'app.selectTemplate': 'Seleziona Modello',\n    'app.save': 'Salva',\n    'app.edit': 'Modifica contenutoe',\n    'app.noMatchesFound': 'Nessun risultato trovato',\n    'app.noDataAvailable': 'Nessun dato disponibile',\n    'app.firstPage': 'Prima pagina',\n    'app.previousPage': 'Pagina precedente',\n    'app.currentPage': 'Pagina corrente',\n    'app.nextPage': 'Pagina successiva',\n    'app.lastPage': 'Ultima pagina',\n    'app.perPage': 'per pagina',\n    'app.of': 'di',\n    'app.ok':'Ok'\n\n}","import {  FormattedMessage } from \"react-intl\";\n/*********************\n * PAGINATION ********\n *********************/\n\nexport const PERPAGEOPTIONS = [5, 10, 15, 25, 50];\nexport const PAGE = 1;\nexport const PAGESIZE = 5;\nexport const TOTALITEMS = 20;\nexport const LASTPAGE = 4;\nexport const PAGEINPUT = 1;\nexport const PAGECHANGEVALUE = 1;\n\n/*********************\n * UI CONSTANT *******\n *********************/\nexport const SEARCH_CONTENT_BY_NAME = \"Search Content By Name...\";\nexport const SELECT_COLLECTION_TYPE = <FormattedMessage id='app.selectCollection' />  \n\n/*********************\n * UI LABEL **********\n *********************/\n export const SELECT = <FormattedMessage id='app.select' />                                    //\n export const NAME = <FormattedMessage id='app.name' />\n export const CREATEDBY = <FormattedMessage id='app.created' />\n export const lastEdited = <FormattedMessage id='app.lastEdited' />\n export const CREATEDDATE = <FormattedMessage id='app.createdDate' />\n\nexport const T_HEADING = {\n    SELECT: SELECT,\n    NAME: NAME,\n    CREATEDBY: CREATEDBY,\n    lastEdited: lastEdited,\n    CREATEDDATE: CREATEDDATE,\n}\n\n//export const BTN_ADD_NEW_CONTENT = '';\nexport const BTN_ADD_NEW_CONTENT = <FormattedMessage id='app.addNewContent' />;\n\n/*********************\n * For Strapi API ****\n *********************/\nexport const KC_TOKEN_PREFIX = 'EntKcToken';\n\n/*********************\n * For Strapi API ****\n *********************/\nexport const UNIVERSAL_DATE_FORMAT = \"YYYY-MM-DD HH:mm:ss\"\n\n/*********************\n * For Strapi Images ****\n *********************/\n export const IMAGE_EXT = [\n    \".ase\",\n    \".art\",\n    \".bmp\",\n    \".blp\",\n    \".cd5\",\n    \".cit\",\n    \".cpt\",\n    \".cr2\",\n    \".cut\",\n    \".dds\",\n    \".dib\",\n    \".djvu\",\n    \".egt\",\n    \".exif\",\n    \".gif\",\n    \".gpl\",\n    \".grf\",\n    \".icns\",\n    \".ico\",\n    \".iff\",\n    \".jng\",\n    \".jpeg\",\n    \".jpg\",\n    \".jfif\",\n    \".jp2\",\n    \".jps\",\n    \".lbm\",\n    \".max\",\n    \".miff\",\n    \".mng\",\n    \".msp\",\n    \".nef\",\n    \".nitf\",\n    \".ota\",\n    \".pbm\",\n    \".pc1\",\n    \".pc2\",\n    \".pc3\",\n    \".pcf\",\n    \".pcx\",\n    \".pdn\",\n    \".pgm\",\n    \".PI1\",\n    \".PI2\",\n    \".PI3\",\n    \".pict\",\n    \".pct\",\n    \".pnm\",\n    \".pns\",\n    \".ppm\",\n    \".psb\",\n    \".psd\",\n    \".pdd\",\n    \".psp\",\n    \".px\",\n    \".pxm\",\n    \".pxr\",\n    \".qfx\",\n    \".raw\",\n    \".rle\",\n    \".sct\",\n    \".sgi\",\n    \".rgb\",\n    \".int\",\n    \".bw\",\n    \".tga\",\n    \".tiff\",\n    \".tif\",\n    \".vtf\",\n    \".xbm\",\n    \".xcf\",\n    \".xpm\",\n    \".3dv\",\n    \".amf\",\n    \".ai\",\n    \".awg\",\n    \".cgm\",\n    \".cdr\",\n    \".cmx\",\n    \".dxf\",\n    \".e2d\",\n    \".egt\",\n    \".eps\",\n    \".fs\",\n    \".gbr\",\n    \".odg\",\n    \".svg\",\n    \".stl\",\n    \".vrml\",\n    \".x3d\",\n    \".sxd\",\n    \".v2d\",\n    \".vnd\",\n    \".wmf\",\n    \".emf\",\n    \".art\",\n    \".xar\",\n    \".png\",\n    \".webp\",\n    \".jxr\",\n    \".hdp\",\n    \".wdp\",\n    \".cur\",\n    \".ecw\",\n    \".iff\",\n    \".lbm\",\n    \".liff\",\n    \".nrrd\",\n    \".pam\",\n    \".pcx\",\n    \".pgf\",\n    \".sgi\",\n    \".rgb\",\n    \".rgba\",\n    \".bw\",\n    \".int\",\n    \".inta\",\n    \".sid\",\n    \".ras\",\n    \".sun\",\n    \".tga\",\n    \".heic\",\n    \".heif\"\n];\n\nexport const STRAPI_IMAGE_EXTENSIONS = ['.JPEG', '.JPG', '.PNG', '.GIF', '.SVG', '.TIFF', '.ICO', '.DVU'];\nexport const STRAPI_IMAGE_URL_KEY = 'url';\nexport const STRAPI_IMAGE_HEIGHT = '50px';\nexport const STRAPI_IMAGE_WIDTH = '50px';\nexport const STRAPI_EXCLUDE_KEYS = [\"createdAt\", \"updatedAt\", \"publishedAt\", \"createdBy\", \"updatedBy\", \"id\", \"localizations\", \"locale\"];\nexport const ACCORDION_FONT_SIZE = \"13px\";\nexport const NO_DATA_AVAILABLE_MSG = <FormattedMessage id='app.noDataAvailable' />","import { STRAPI_EXCLUDE_KEYS } from \"./Constant\";\n\n/**\n * Value to show under Name colum in the table.\n * Checks if name or title key is present, if yes, fetches its value or fetches any other key's value by excluding some specific keys.\n * @param {*} content\n * @returns\n */\nexport const getKey = (content) => {\n    if (content) {\n        const keys = Object.keys(content);\n        let index = keys.findIndex(item => 'title' === item.toLowerCase());\n        if (index > -1) {\n            return Object.keys(content)[index];\n            // return content[Object.keys(content)[index]];\n        } else {\n            index = keys.findIndex(item => 'name' === item.toLowerCase());\n            if (index > -1) {\n                return Object.keys(content)[index];\n                // return content[Object.keys(content)[index]];\n            } else {\n                const allowedKeys = keys.filter(item => !STRAPI_EXCLUDE_KEYS.includes(item));\n                if (allowedKeys && allowedKeys.length) {\n                    return allowedKeys[0];\n                    // return content[allowedKeys[0]];\n                }\n            }\n        }\n    }\n    // const searchByKey = '';\n    return '-';\n}\nexport const PAGINATION_MESSAGES = (props) => ({\n    \"firstPage\": props.intl.formatMessage({ id: \"app.firstPage\" }),\n    \"previousPage\": props.intl.formatMessage({ id: \"app.previousPage\" }),\n    \"currentPage\": props.intl.formatMessage({ id: \"app.currentPage\" }),\n    \"nextPage\": props.intl.formatMessage({ id: \"app.nextPage\" }),\n    \"lastPage\": props.intl.formatMessage({ id: \"app.lastPage\" }),\n    \"perPage\": props.intl.formatMessage({ id: \"app.perPage\" }),\n    \"of\": props.intl.formatMessage({ id: \"app.of\" })\n});\n\nexport const parseData = (data) => data.length > 0 ? JSON.parse(data) : data;","import React from \"react\";\nimport moment from 'moment';\nimport { UNIVERSAL_DATE_FORMAT } from \"../helper/Constant\";\nimport {  FormattedMessage } from \"react-intl\";\nimport { getKey } from \"../helper/Helper\";\nimport { Spinner } from \"patternfly-react/dist/js/components/Spinner\";\n\nexport class SimpleTable extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            // DATA STATE\n            templateType: [{'label': 'vj'}],\n            selectedTemplateType: [],\n        }\n    }\n\n    /**\n       * Renders Button on Typehead.\n       * @returns Button element\n       */\n    renderToggleButton = ({ isMenuShown, onClick }) => (\n        <button\n            type=\"button\"\n            style={{ position: \"absolute\", height: \"100%\", top: \"0px\", right: \"0px\", border: \"1px solid lightgray\" }}\n            onClick={(e) => {\n                e.preventDefault();\n                onClick(e);\n            }}\n        ><span className=\"fa fa-angle-down\"></span></button>\n    );\n\n    onChangeTemplateId = (e) => {\n        this.props.setTemplateId(e.target.value);\n    }\n\n    render() {\n        return (\n            <>\n                {this.props.loadingData &&\n                    <Spinner\n                        loading={this.props.loadingData}\n                        className=\"\"\n                        size=\"md\"\n                    ></Spinner>}\n                {\n                    !this.props.loadingData && (\n                        <table className=\"table table-bordered table-datatable table-hover table-striped Contents__table-element\">\n                            <thead>\n                                <tr>\n                                    {Object.keys(contentAttribute).map((item, idx) => <th key={idx}><FormattedMessage id={contentAttribute[item]} /></th>)}\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    this.props.selectedContent.length > 0 && (\n                                        this.props.selectedContent.map(item => {\n                                            return (\n                                                <tr key={item.id}>\n                                                    <td>{item[getKey(item)]}</td>\n                                                    <td>{`${item.createdBy.firstname} ${item.createdBy.lastname}`}</td>\n                                                    <td>{moment(new Date(item.updatedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                                                    <td>{moment(new Date(item.publishedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                                                    <td>\n                                                        <select name=\"modelId\" defaultValue={this.props.selectedTemplateId === 'default' ? 'none' : this.props.selectedTemplateId} className=\"form-control\" onChange={this.onChangeTemplateId}>\n                                                            {<FormattedMessage id='app.selectTemplate' >\n                                                                {(message) => <option value='none' disabled hidden>{message}</option>}\n                                                            </FormattedMessage>}\n                                                            {this.props.templateList.map((el) => {\n                                                                return <option key={el.id} value={el.id}>{el.templateName}</option>;\n                                                            })}\n                                                        </select>\n                                                    </td>\n                                                </tr>\n                                            )\n                                        })\n                                    )\n                                }\n                            </tbody>\n                        </table>\n                    )\n                }\n            </>\n        );\n    }\n}\n\n\nconst contentAttribute = {\n    Title: \"app.name\" ,\n    createdAt: \"app.created\",\n    updatedAt: \"app.lastEdited\",\n    createDate: \"app.createdDate\",\n    selectDefaultTemplate: \"app.selectDefaultTemplate\"\n    // restirctions: \"Restrictions\"\n}","import axios from 'axios';\nimport { KC_TOKEN_PREFIX, PAGE, PAGESIZE } from '../helper/Constant';\nconst domain = `${process.env.REACT_APP_STRAPI_API_URL}`;\nconst templateBaseUrl = `${process.env.REACT_APP_PUBLIC_API_URL}/template/`;\nconst rootAdminEndPoint = `${domain}/content-manager/collection-types/api::`;\nconst localeUrl = `${domain}/i18n/locales`\nconst sortByCreateDateByDescOrder = `&sort=createdAt:DESC`;\nconst STRAPI_TOKEN = {\n    'Authorization': `Bearer ${process.env.REACT_APP_LOCAL_STRAPI_TOKEN}`\n}\n\nexport const postLoginAdmin = async (data) => {\n    return axios.post(`${domain}/admin/login`, data);\n}\n\n// GET Collection Type\nexport const getCollectionTypes = async () => {\n    const { data } = await axios.get(`${domain}/content-manager/content-types`, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const getContents = async (collectionType, page = PAGE, pageSize = PAGESIZE) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}?page=${page}&pageSize=${pageSize}${sortByCreateDateByDescOrder}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\n/**\n * getContentById Search Content By Id.\n * @param {*} contentType\n * @param {*} contentId\n * @returns\n */\nexport const getContentById = async (contentName, contentId) => {\n    if (!contentName || !contentId) console.error(contentName, contentId);\n    const url = `${domain}/content-manager/collection-types/api::${contentName}.${contentName}/${contentId}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX))\n    return data;\n}\n\nexport const getCollectionLocaleWise = async (collectionType, localecode) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}?locale=${localecode}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\n// API to get locales\nexport const getLocales = async () => {\n    let url = `${localeUrl}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const fetchContents = async (collectionType) => {\n    // const url = `${domain}/api/${collectionType}`;\n    return await getContents(collectionType);\n}\n\nexport const getContentDetailsByCollectionTypeAndId = async (collectionType, contentId) => {\n    let url = `${rootAdminEndPoint}${collectionType}.${collectionType}/${contentId}`;\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX));\n    return data;\n}\n\nexport const filterContentsByName = async (collectionType, query, searchBy, page = PAGE, pageSize = PAGESIZE) => {\n    if (!collectionType) {\n        throw new Error('collectionType is missing');\n    }\n    const url = `${rootAdminEndPoint}${collectionType}.${collectionType}?filters[${searchBy}][$containsi]=${query}&page=${page}&pageSize=${pageSize}`\n    const { data } = await axios.get(url, addAuthorizationRequestConfig({}, KC_TOKEN_PREFIX))\n    return data;\n}\n\n\n// API to list of templates Spring-Boot API\nexport const getTemplate = async (collectionType) => {\n    const collectionTypeUrl = collectionType ? `?collectionType=${collectionType}` : \"\";\n    const data = await axios.get(`${templateBaseUrl+collectionTypeUrl}`,addAuthorizationRequestConfig({}));\n    return data;\n}\n\nconst getKeycloakToken = () => {\n    // For testing purpose only\n    // return '';\n    if (window && window.entando && window.entando.keycloak && window.entando.keycloak.authenticated) {\n        return window.entando.keycloak.token\n    } else {\n        return localStorage.getItem('token');\n    }\n}\n\nconst getDefaultOptions = (defaultBearer) => {\n    const token = getKeycloakToken()\n    if (!token) {\n        //Below if condition is to run the strapi API in local\n        if (defaultBearer === KC_TOKEN_PREFIX) {\n            return {\n                headers: STRAPI_TOKEN,\n            }\n        } else {\n            return {}\n        }\n    }\n    // logic to add token for both strapi and MS api\n    return {\n        headers: {\n            Authorization: `${defaultBearer} ${token}`,\n        },\n    }\n}\n\n// Get authorization tokens\nexport const addAuthorizationRequestConfig = (config = {}, defaultBearer = 'Bearer') => {\n    let defaultOptions = getDefaultOptions(defaultBearer);\n    return {\n        ...config,\n        ...defaultOptions\n    }\n}","import React, { Component } from 'react'\n\nimport {  FormattedMessage } from \"react-intl\";\nimport {\n    Row,\n    Col,\n    Button\n} from 'patternfly-react';\nimport { SimpleTable } from '../ui/SimpleTable';\nimport { getCollectionTypes, getContentById, getTemplate } from '../api/Api';\nimport { Link } from 'react-router-dom';\nimport { BTN_ADD_NEW_CONTENT } from '../helper/Constant';\nimport { parseData } from '../helper/Helper';\nconst strapiDomain = `${process.env.REACT_APP_STRAPI_TARGET_URL}`;\n\nexport default class Config extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedContent: [],\n            name: null,\n            nameTwo: null,\n            collectionTypes: [],\n            selectedContentId: 0,\n            selectedTemplateId: 'default',\n            templateList: [],\n            loadingData: false\n        };\n        this.handleAddNewContent = this.handleAddNewContent.bind(this);\n    }\n\n    componentDidMount = async () => {\n        this.setState({ loadingData: true })\n        let contentTypes = await getCollectionTypes();\n        contentTypes = contentTypes.data.filter(obj => {\n            return obj && (obj.uid && obj.uid.startsWith(\"api::\")) && obj.isDisplayed;\n        });\n        const contentTypeRefine = [];\n        contentTypes.length && contentTypes.forEach(element => {\n            contentTypeRefine.push({ label: element.info.pluralName })\n        });\n\n        const parsedCollType = parseData(this.props.collType);\n        if (parsedCollType.length && this.props.selectedContentId) {\n            let { data: templatesList } = await getTemplate(parsedCollType[0].value ? parsedCollType[0].value : '');\n            this.setState({ templateList: templatesList, collectionTypes: templatesList })\n            this.fetchContentById(parsedCollType[0].value, this.props.selectedContentId);\n        } else {\n            this.setState({ loadingData: false })\n        }\n    }\n\n    fetchContentById = async (collectionType, contentId) => {\n        const content = await getContentById(collectionType, contentId);\n        this.setState({ selectedContent: [content], loadingData: false })\n    }\n\n    onChangeTemplateId = (event) => {\n        this.setState({ selectedTemplateId: event.target.value })\n    }\n\n    handleTypeaheadChangeContentType = selected => {\n        let selectedContentType = selected.map(option => option.label);\n        this.setState({ templateList: selectedContentType });\n    };\n\n     /**\n     * Navigate to Strapi dashboard/login page in a new tab on browser\n     */\n      handleAddNewContent = () => {\n        let strapiContentManagerUrl = `${strapiDomain}/admin/content-manager`;\n        var newWindow = window.open(strapiContentManagerUrl, '_blank');\n        if(newWindow) {\n            newWindow.focus();\n        }\n    }\n\n    render() {\n        return (\n            <form className=\"form-horizontal SingleContentConfigForm well\">\n                <Row>\n                    <Col xs={12}>\n                        <div>\n                            <div>\n                                <span className=\"icon fa fa-puzzle-piece\" title=\"Widget\" />\n                                <h5 className=\"SingleContentConfigFormBody__widgetTitle\"><FormattedMessage id=\"app.content\" /></h5>\n                                <div className=\"SectionTitle SectionTitle__non-collapsable\" role=\"button\">\n                                <span> <FormattedMessage id=\"app.info\" /></span>\n                                </div>\n                                <div className=\"row\">\n                                    <Col xs={6}>\n                                        <h3 className=\"SingleContentConfigFormBody__contentTitle\">\n                                        <FormattedMessage id=\"app.content\" />: -\n                                        </h3>\n                                    </Col>\n                                    <Col xs={6} className=\"SingleContentConfigFormBody__addButtons\">\n                                        <Link to=\"/singleconfigpage\">\n                                            <Button bsStyle=\"primary\">\n                                                {this.state.selectedContent.length ? <FormattedMessage id=\"app.edit\" /> : <FormattedMessage id=\"app.addExistingContent\" />}\n                                            </Button>\n                                        </Link>\n                                        <Button className=\"AddContentTypeFormBody__save--btn\" bsStyle=\"primary\" onClick={this.handleAddNewContent}>\n                                            {BTN_ADD_NEW_CONTENT}\n                                        </Button>\n                                    </Col>\n                                </div>\n                                <div style={{ marginTop: \"1rem\" }}></div>\n                                <SimpleTable\n                                    setTemplateId={this.props.setTemplateId}\n                                    templateList={this.state.templateList}\n                                    content={this.state.selectedContent}\n                                    selectedContent={this.state.selectedContent}\n                                    selectedTemplateId={this.props.selectedTemplateId}\n                                    loadingData={this.state.loadingData}\n                                />\n                            </div>\n                        </div>\n                    </Col>\n                </Row>\n            </form>\n        )\n    }\n}\n","import moment from 'moment';\nimport { Grid } from 'patternfly-react/dist/js/components/Grid';\nimport { Panel, PanelGroup } from 'react-bootstrap';\nimport { ACCORDION_FONT_SIZE, NO_DATA_AVAILABLE_MSG, STRAPI_EXCLUDE_KEYS, STRAPI_IMAGE_EXTENSIONS, STRAPI_IMAGE_HEIGHT, STRAPI_IMAGE_URL_KEY, STRAPI_IMAGE_WIDTH, UNIVERSAL_DATE_FORMAT } from './Constant';\n\nlet panelGroupId = 1;\n\nexport const renderPanelGroup = (data) => {\n    panelGroupId = panelGroupId + 1;\n    return (\n        <PanelGroup accordion id={panelGroupId} style={{ marginBottom: '5px' }}>\n            {data && Object.keys(data).length > 0\n                ?\n                isImageObject(data)\n                    ?\n                    renderPanel(STRAPI_IMAGE_URL_KEY, 0, data[STRAPI_IMAGE_URL_KEY])\n                    :\n                    Object.keys(data).filter(key => ignoreProps(key)).map((key, index) => {\n                        let keyToShow;\n                        let dataToShow;\n                        if (isAnArray(data) && key && (Number(key) || Number(key) === 0)) {\n                            if(data[key]) {\n                                keyToShow = checkIfComponent(data[key]);\n                                if(keyToShow && !Number(keyToShow)) {\n                                    dataToShow = {...data[key]};\n                                    delete dataToShow['__component'];\n                                } else {\n                                    keyToShow = key;\n                                    dataToShow = data[key];\n                                }\n                            }\n                            if (keyToShow && (Number(keyToShow) || Number(keyToShow) === 0)) {\n                                keyToShow = Number(keyToShow) + 1;\n                                keyToShow = keyToShow.toString();\n                            }\n                        } else {\n                            keyToShow = key;\n                            dataToShow = data[key];\n                        }\n                        return (renderPanel(keyToShow, index, dataToShow));\n                    })\n                :\n                <span>{NO_DATA_AVAILABLE_MSG}</span>}\n        </PanelGroup>\n    )\n}\n\nconst checkIfComponent = (dataObj) => {\n    if (dataObj) {\n        let keys = Object.keys(dataObj);\n        if (keys.includes('__component')) {\n            let arr = dataObj['__component'] && dataObj['__component'].split('.');\n            if (arr && arr.length > 0) {\n                if (arr[1] && arr[1].indexOf('-')) {\n                    return arr[1].replace('-', '_');\n                } else {\n                    return arr[1];\n                }\n            }\n        }\n    }\n}\n\nconst isAnArray = (data) => {\n    if (data) {\n        if (Array.isArray(data)) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nconst renderPanel = (theKey, theIndex, data) => {\n    return (\n        <Panel eventKey={theIndex} key={theIndex}>\n            {renderPanelHeading(theKey, data)}\n            {\n                isObject(data)\n                &&\n                renderPanelBody(data, true)\n            }\n        </Panel>\n    )\n}\n\nconst renderPanelHeading = (theKey, data) => {\n    return (\n        <Panel.Heading>\n            {isObject(data) && !isImageObject(data)\n                ?\n                renderPanelTitleToggle(theKey)\n                :\n                renderPanelTitle(theKey, data)}\n        </Panel.Heading>\n    );\n}\n\nconst renderPanelTitle = (theKey, data) => {\n    return (\n        <Panel.Title>\n            <Grid.Row className=\"show-grid\" style={{ display: \"flex\", fontSize: ACCORDION_FONT_SIZE }}>\n                <Grid.Col style={{ width: \"10%\", marginLeft: '2.5rem', wordBreak: \"break-word\" }}>\n                    <div>\n                        <strong>\n                            {isImageObject(data) && isKey0To9(theKey)\n                            ?\n                            'Photo' + ' ' + theKey.charAt(0).toUpperCase() + theKey.slice(1)\n                            :\n                            theKey.charAt(0).toUpperCase() + theKey.slice(1)\n                            }\n                        </strong>\n                    </div>\n                </Grid.Col>\n                <Grid.Col style={{ width: \"90%\", marginLeft: '1rem', paddingRight: '2rem', lineHeight: '1.2' }}>\n                    {\n                    isImageObject(data)\n                    ?\n                    renderAccordionData(data[STRAPI_IMAGE_URL_KEY.toLowerCase()])\n                    :\n                    renderAccordionData(data)\n                    }\n                </Grid.Col>\n            </Grid.Row>\n        </Panel.Title>\n    );\n}\n\nconst renderPanelTitleToggle = (theKey) => {\n    return (\n        <Panel.Title toggle style={{marginLeft: \"-1rem\", fontSize: ACCORDION_FONT_SIZE }}>\n            <span><strong>{theKey.charAt(0).toUpperCase() + theKey.slice(1)}</strong></span>\n        </Panel.Title>\n    );\n}\n\nconst renderPanelBody = (data, isObject) => {\n    if (isObject) {\n        return (\n            <Panel.Body collapsible>\n                {renderPanelGroup(data)}\n            </Panel.Body>\n        )\n    } else {\n        return (\n            <Panel.Body collapsible>\n                <span>{data}</span>\n            </Panel.Body>\n        )\n    }\n}\n\nconst renderAccordionData = (data) => {\n    if (data === null || data === undefined) {\n        return <span> - </span>\n    } else if (typeof data === 'boolean') {\n        return <span>{data.toString()}</span>\n    } else if (typeof data === 'string') {\n        if (endsWithAnyImageExtension(data)) {\n            return <img src={process.env.REACT_APP_STRAPI_API_URL + data} width={STRAPI_IMAGE_WIDTH} height={STRAPI_IMAGE_HEIGHT} alt='image' />\n        } else if(isDate(data)) {\n            return <span>{moment(new Date(data)).format(UNIVERSAL_DATE_FORMAT)}</span>;\n        }\n        return <span style={{ wordBreak: 'break-word' }}>{data}</span>;\n    } else if (typeof data === 'number') {\n        return <span>{data}</span>;\n    } else if (typeof data === 'object') {\n        return data;\n    } else {\n        return <span> - </span>;\n    }\n}\n\nconst isDate = (dateString) => {\n    if(dateString) {\n        if(dateString && dateString.endsWith('Z') && dateString.length === 24 && dateString.split('T')[0].length === 10 && dateString.split('T')[1].length === 13) { //2016-11-16T04:30:00.000Z\n            return true;\n        }\n    }\n    return false;\n}\n\nconst endsWithAnyImageExtension = (string) => {\n    for (let suffix of STRAPI_IMAGE_EXTENSIONS)\n        if (string.toUpperCase().endsWith(suffix))\n            return true;\n    return false;\n}\n\nconst isObject = (data) => {\n    if (data) {\n        if (typeof data === 'object') {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nconst isImageObject = (object) => {\n    let keys = object && Object.keys(object);\n    if (keys && keys.includes('ext') && keys.includes('formats') && keys.includes('url')) {\n        if (STRAPI_IMAGE_EXTENSIONS.includes(object['ext'].toUpperCase())) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst isKey0To9 = (key) => {\n    if (key && Number(key) && Number(key) >= 0) {\n        return true;\n    } return false;\n}\n\nconst ignoreProps = (key) => {\n    return !STRAPI_EXCLUDE_KEYS.includes(key);\n}","import { Button, Icon, Modal, Tab, Tabs } from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { getCollectionLocaleWise, getContentDetailsByCollectionTypeAndId, getContentDetailsById, getLocales } from '../api/Api';\nimport { renderPanelGroup } from '../helper/AccordionHelper';\nimport {  FormattedMessage } from \"react-intl\";\n\nexport default class ContentDetailModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            show: true,\n            collectionTypes: [],\n            mockRows: [],\n            selectedContent: [],\n            selectedCollectionType: null,\n            collectionAttributes: this.props.dummyData,\n            dataToShowOnModal: {},\n            localeInfo:[],\n            currentCode: [this.props.contentId],\n            dataToShowOnModalRestTabs:{}\n          };\n        this.toggleTab = this.toggleTab.bind(this);\n        this.getCollectionByLocaleName = this.getCollectionByLocaleName.bind(this);\n    }\n\n    toggleTab = (index) => {\n        if (this.state.dataToShowOnModal.localizations && this.state.dataToShowOnModal.localizations.length > 0) {\n            this.getCollectionByLocaleName(this.state.currentCode[index]);\n        }\n        this.props.setActiveTabKey(index);\n    }\n\n    getLocaleInfo = async () => {\n        const data = await getLocales();\n        this.setState({ localeInfo: data });\n    }\n\n    getLocaleFullName(code) {\n        const filterItem = this.state.localeInfo.filter(item => item.code === code)\n        return filterItem[0].name;\n    }\n\n    componentDidMount = async() =>{\n        this.getLocaleInfo();\n    }\n\n    getCollectionByLocaleName = async (code) => {\n        const contentDettailsResponse = await getContentDetailsByCollectionTypeAndId(this.props.collectionType, code);\n        if (code === this.props.contentId)\n            this.setState({ dataToShowOnModal: { ...contentDettailsResponse } });\n        else {\n            this.setState({ dataToShowOnModalRestTabs: { ...contentDettailsResponse } });\n        }\n    }\n\n    componentDidUpdate = async (prevProps, prevState) => {\n      if (this.props.collectionType && this.props.contentId) {\n        if (prevProps.collectionType !== this.props.collectionType || prevProps.contentId !== this.props.contentId) {\n          const contentDettailsResponse = await getContentDetailsByCollectionTypeAndId(this.props.collectionType, this.props.contentId);\n          this.setState({ dataToShowOnModal: { ...contentDettailsResponse } });\n          this.setState({ dataToShowOnModalRestTabs: { ...contentDettailsResponse } });\n          this.props.setActiveTabKey(0);\n          this.setState({ currentCode: [this.props.contentId] })\n        }\n      }\n    }\n    \n    render() {\n        return (\n            <>\n                <Modal dialogClassName=\"ContentsFilterModal\" show={this.props.show} onHide={this.props.onHide} >\n                    <Modal.Header>\n                        <Modal.Title>{this.state.dataToShowOnModal && Object.keys(this.state.dataToShowOnModal).length > 0 && this.props.fetchTitleOrName(this.state.dataToShowOnModal)}\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <div\n                            className=\"CollapsibleSection__title no-padding\"\n                            role=\"button\"\n                            tabIndex={0}\n                        >\n                        </div>\n                        <div>\n                            <Tabs id={'id'} activeKey={this.props.activeTabKey} onSelect={this.toggleTab}>\n                                {this.state.dataToShowOnModal && this.state.dataToShowOnModal.locale ? <Tab eventKey={0} title={this.getLocaleFullName(this.state.dataToShowOnModal.locale).split(\" \")[0]} style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                    {renderPanelGroup(this.state.dataToShowOnModal)}\n                                </Tab> : <Tab eventKey={0} title=\"English\" style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                    {renderPanelGroup(this.state.dataToShowOnModal)}\n                                </Tab>}\n                                {this.state.dataToShowOnModal && this.state.dataToShowOnModal.localizations && this.state.dataToShowOnModal.localizations.length > 0 && this.state.dataToShowOnModal.localizations.map((locTabs, i) => {\n                                    this.state.currentCode.push(locTabs.id)\n                                    return <Tab key={i + 1} eventKey={i + 1} title={this.getLocaleFullName(locTabs.locale).split(\" \")[0]} style={{ overflowY: \"auto\", height: \"38rem\", overflowX: \"hidden\" }}>\n                                        {renderPanelGroup(this.state.dataToShowOnModalRestTabs)}\n                                    </Tab>\n                                }\n                                )}\n                            </Tabs>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button bsStyle={'primary'} onClick={this.props.onHide}>\n                        <FormattedMessage id='app.ok'/>\n                        </Button>\n                    </Modal.Footer>\n                </Modal>\n            </>\n        );\n    }\n}\n","import {\n  Col, Grid, PaginationRow, Row\n} from 'patternfly-react';\nimport React, { Component } from 'react';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\nimport { filterContentsByName, getCollectionTypes, getContents } from '../api/Api';\nimport { LASTPAGE, NAME, PAGE, PAGECHANGEVALUE, PAGEINPUT, PAGESIZE, PERPAGEOPTIONS, SEARCH_CONTENT_BY_NAME, SELECT_COLLECTION_TYPE, STRAPI_EXCLUDE_KEYS, TOTALITEMS, T_HEADING, UNIVERSAL_DATE_FORMAT } from '../helper/Constant';\nimport ContentDetailModal from '../ui/ContentDetailModal';\nimport {  FormattedMessage,injectIntl } from \"react-intl\";\nimport { PAGINATION_MESSAGES, parseData } from '../helper/Helper';\nimport { Spinner } from 'patternfly-react/dist/js/components/Spinner';\n\nclass SingleContentList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      page: PAGE,\n      currPageWillUpdating: PAGE,\n      pageSize: PAGESIZE,\n      totalItems: TOTALITEMS,\n      lastPage: LASTPAGE,\n      pageInput: PAGEINPUT,\n      pageChangeValue: PAGECHANGEVALUE,\n      // Modal State\n      show: false,\n      activeTabKey: 0,\n\n      contentDetailsOnModal: {},\n      searchQuery: '',\n      setSearchBy: '',\n      searchBtnClk: false,\n      // DATA STATE\n      collectionType: [],\n      selectedCollectionType: [],\n      contents: [],\n      selectedContent: {},\n      contentIdForModal: '',\n      loadingData: false\n    }\n    this.searchByKey = ''\n  }\n\n  componentDidMount = async () => await this.initSingleContentListPage();\n\n  componentWillUnmount = () => this.shouldShowEtSaveBtn('visible');\n\n  componentDidUpdate = async (prevProps, prevState) => {\n    if (prevProps.selectedCollectionType !== this.props.selectedCollectionType ||\n      prevState.pageSize !== this.state.pageSize && !this.state.searchBtnClk) {\n      this.setState({ page: PAGE, pageInput: PAGE, currPageWillUpdating: PAGE },\n        async () => {\n          await this.doContentSearch();\n        }\n      )\n    }\n    if (prevState.page !== this.state.page && !this.state.searchBtnClk) {\n      // this.setState({ selectedContent: null }); Commented on edit to cache the content/record\n      await this.doContentSearch();\n    }\n  }\n\n  async initSingleContentListPage() {\n    await this.setCollectionTypeState();\n    this.shouldShowEtSaveBtn('hidden');\n    const parsedData = parseData(this.props.collType);\n    if (parsedData) {\n      this.setState({ selectedCollectionType: parsedData });\n      await this.getContentsByCollectionType(parsedData[0].value, this.state.page, this.state.pageSize);\n    }\n  }\n\n  shouldShowEtSaveBtn = (btnVisibility) => {\n    for (let el of document.getElementsByClassName('pull-right save btn btn-primary')) {\n      el.style.visibility = btnVisibility;\n    }\n  }\n\n  async doContentSearch() {\n    if (this.searchByKey && this.state.searchQuery) {\n      const searchResult = await filterContentsByName(\n        this.state.selectedCollectionType[0].value,\n        this.state.searchQuery, this.searchByKey, this.state.page, this.state.pageSize\n      );\n      this.handleStateOnTermSearch(searchResult);\n    } else {\n      await this.getContentsByCollectionType(this.state.selectedCollectionType[0].value, !this.state.page ? PAGE : this.state.page, this.state.pageSize);\n    }\n  }\n\n  async setCollectionTypeState() {\n    const { data: collectionTypeData } = await getCollectionTypes();\n    const collectionTypeApiData = this.filterUidByApiPrefix(collectionTypeData);\n    this.setState({ collectionType: collectionTypeApiData.map(el => ({ label: el.info.displayName, value: el.info.singularName })) });\n  }\n\n  filterUidByApiPrefix = (collectionTypeData) => {\n    return collectionTypeData.filter(el => el.uid.startsWith('api::'))\n  }\n\n  open = async (content) => {\n      this.setState({ show: true, contentDetailsOnModal: content,  contentIdForModal: content && content.id, activeTabKey: 0 })\n  }\n\n  close = () => {\n    this.setState({ show: false })\n  }\n\n  setActiveTabKey = (value) => {\n    this.setState({activeTabKey: value})\n  }\n\n  handleCollectionTypeChange = async (collectionType) => {\n    this.searchByKey = '';\n    this.setState({ contents: [], selectedContent: {} });\n    const collType = collectionType[0]\n    this.setState({ selectedCollectionType: collectionType })\n    if (collType && collType.value) {\n      await this.getContentsByCollectionType(collType.value)\n      this.props.setSelectedContentName(collType.value)\n    } else {\n      this.props.setSelectedContentName(null);\n    }\n    this.setState({ contentIdForModal: undefined, currPageWillUpdating: PAGE });\n  }\n\n  getContentsByCollectionType = async (collectionType, page, pageSize) => {\n    this.setState({ loadingData: true });\n    const contentData = await getContents(collectionType, page, pageSize);\n    if (this.props.collType && parseData(this.props.collType)[0].value === this.props.selectedContentName) {\n      const seletedContentData = (contentData && contentData.results) && contentData.results.find(content => {\n        if (+content.id === +this.props.selectedContentId) return content\n      });\n      if (this.props.selectedContentId) {\n        this.setState({selectedContent: seletedContentData})\n      }\n    }\n    this.setState({\n      contents: contentData.results,\n      lastPage: contentData.pagination.pageCount,\n      page: contentData.results.length ? contentData.pagination.page : 0,\n      // page: contentData.results.length ? contentData.pagination.page : 0,\n      currPageWillUpdating: contentData.results.length ? contentData.pagination.page : 0,\n      pageSize: contentData.pagination.pageSize,\n      totalItems: contentData.pagination.total,\n      loadingData: false,\n    });\n  }\n\n  /**\n   * Renders Button on Typehead.\n   * @returns Button element\n   */\n  renderToggleButton = ({ isMenuShown, onClick }) => (\n    <button\n      type=\"button\"\n      style={{ position: \"absolute\", height: \"100%\", top: \"0px\", right: \"0px\", border: \"1px solid lightgray\" }}\n      onClick={(e) => {\n        e.preventDefault();\n        onClick(e);\n      }}\n    ><span className=\"fa fa-angle-down\"></span></button>\n  );\n\n  changePage(page) {\n    this.setState({ page: page, currPageWillUpdating: page })\n  }\n\n  setPage = value => {\n    const page = Number(value);\n    if (\n      !Number.isNaN(value) &&\n      value !== '' &&\n      page > 0 &&\n      page <= this.totalPages()\n    ) {\n      let newPaginationState = Object.assign({}, this.state.pagination);\n      newPaginationState.page = page;\n      this.setState({ pagination: newPaginationState, pageChangeValue: page });\n    }\n  }\n\n  onContentSearch = async (e) => {\n    e.preventDefault();\n    // collectionType, query, searchBy\n    if (this.state.searchQuery) {\n      this.setState({ loadingData: true });\n      const searchResult = await filterContentsByName(\n        this.state.selectedCollectionType[0].value,\n        this.state.searchQuery, this.searchByKey, PAGE, PAGESIZE\n      );\n      this.handleStateOnTermSearch(searchResult);\n    } else {\n      this.getContentsByCollectionType(this.state.selectedCollectionType[0].value)\n    }\n  }\n\n  handleQueryChange = (e) => {\n    e.preventDefault();\n    this.setState({ searchQuery: e.target.value })\n  }\n\n  onPerPageSelect = (pageSize) => {\n    this.setState({ searchBtnClk: false });\n    this.setState({pageSize})\n  }\n\n  onPageInput = e => {\n    this.setState({ currPageWillUpdating: e.target.value })\n  }\n\n  onSubmit = () => {\n    if (+this.state.currPageWillUpdating && this.state.currPageWillUpdating <= this.state.lastPage) {\n      this.setState({ page: +this.state.currPageWillUpdating })\n    }\n  };\n\n  /**\n   * Value to show under Name colum in the table.\n   * Checks if name or title key is present, if yes, fetches its value or fetches any other key's value by excluding some specific keys.\n   * @param {*} content\n   * @returns\n   */\n  fetchTitleOrName = (content) => {\n    if (content) {\n      const keys = Object.keys(content);\n      let index = keys.findIndex(item => 'title' === item.toLowerCase());\n      if (index > -1) {\n        this.searchByKey = Object.keys(content)[index];\n        return content[Object.keys(content)[index]];\n      } else {\n        index = keys.findIndex(item => 'name' === item.toLowerCase());\n        if (index > -1) {\n          this.searchByKey = Object.keys(content)[index];\n          return content[Object.keys(content)[index]];\n        } else {\n          const allowedKeys = keys.filter(item => !STRAPI_EXCLUDE_KEYS.includes(item));\n          if (allowedKeys && allowedKeys.length) {\n            this.searchByKey = allowedKeys[0];\n            return content[allowedKeys[0]];\n          }\n        }\n      }\n    }\n    this.searchByKey = '';\n    return '-';\n  }\n\n  radioButton = (content) => {\n    if (this.state.selectedContent && this.state.selectedContent.id) {\n      if (this.props.collType.length) {\n        return (<input onChange={() => {\n          this.setState({ selectedContent: content })\n        }}\n          type=\"radio\" id={content.id} name=\"content\" value={content.id}\n          defaultChecked={this.state.selectedContent.id === content.id && parseData(this.props.collType)[0].value === this.props.selectedContentName}\n        />)\n      }\n      return (<input onChange={() => {\n        this.setState({ selectedContent: content })\n      }}\n        type=\"radio\" id={content.id} name=\"content\" value={content.id}\n        defaultChecked={this.state.selectedContent.id === content.id}\n      />)\n    } else {\n      return (<input onChange={() => {\n        this.setState({ selectedContent: content })\n      }}\n        type=\"radio\" id={content + content.id} name=\"content\" value={content.id}\n      />)\n    }\n  };\n\n  onPageNavigation = changePageValue => {this.setState({ searchBtnClk: false }); this.changePage(changePageValue)}\n\n  handleStateOnTermSearch(searchResult) {\n    this.setState({\n      contents: searchResult.results,\n      lastPage: searchResult.pagination.pageCount,\n      page: searchResult.results.length ? searchResult.pagination.page : 0,\n      currPageWillUpdating: searchResult.results.length ? searchResult.pagination.page : 0,\n      pageSize: searchResult.pagination.pageSize,\n      totalItems: searchResult.pagination.total,\n      searchBtnClk: true,\n      loadingData: false\n    });\n  }\n\n  saveHandler = () => {\n    this.props.setContent([this.state.selectedContent]);\n    this.props.setCollectionType(this.state.selectedCollectionType);\n    this.props.setTemplateId('default');\n  }\n\n  cancelHandler = () => {this.props.collType.length && this.props.setSelectedContentName(parseData(this.props.collType)[0].value)}\n\n  render() {\n    const pagination = {\n      page: !this.state.page ? 1 : this.state.page,\n      perPage: this.state.pageSize,\n      perPageOptions: PERPAGEOPTIONS,\n    };\n    const itemsStart = this.state.totalItems === 0 ? 0 : ((this.state.page - 1) * this.state.pageSize) + 1;\n    const itemsEnd = Math.min(this.state.page * this.state.pageSize, this.state.totalItems);\n    let saveConfigBtn = true;\n    if (this.state.selectedContent && Object.keys(this.state.selectedContent).length) {\n      saveConfigBtn = false;\n    } else if (this.props.collType && parseData(this.props.collType)[0].value === this.props.selectedContentName) {\n      saveConfigBtn = false;\n    }\n    return (\n      <Grid>\n        <Row className=\"mt-2\">\n          <Col lg={12}>\n            <legend>\n            <FormattedMessage id=\"app.selectContent\" />\n            </legend>\n          </Col>\n        </Row>\n        <Row className=\"mt-2\">\n          <Col lg={3}>\n            <h6><b>{SELECT_COLLECTION_TYPE}</b></h6>\n          </Col>\n        </Row>\n        <Row>\n          <Col lg={3}>\n            <Typeahead\n              id=\"collectionTypeDropdown\"\n             // placeholder={SELECT_COLLECTION_TYPE}\n              placeholder={this.props.intl.formatMessage({ id: \"app.chooseAnOption\" })}\n              emptyLabel={this.props.intl.formatMessage({ id: \"app.noMatchesFound\" })}\n              options={this.state.collectionType}\n              onChange={this.handleCollectionTypeChange}\n              selected={this.state.selectedCollectionType}\n            >\n              {({ isMenuShown, toggleMenu }) => (\n                this.renderToggleButton({ isMenuShown, onClick: toggleMenu })\n              )}\n            </Typeahead>\n          </Col>\n        </Row>\n        {\n          Object.keys(this.state.selectedCollectionType).length > 0 &&\n          <>\n            <Row className=\"mt-2\">\n              <Col lg={3}>\n                <h5 style={{ marginBottom: \"0px\" }}><strong>{this.state.selectedCollectionType && this.state.selectedCollectionType[0] && this.state.selectedCollectionType[0].label}</strong></h5>\n              </Col>\n            </Row>\n            <Row>\n              <Col lg={12}>\n                <div\n                  className=\"ContentsFilter well\"\n                  role=\"button\"\n                  tabIndex={0}\n                  style={{ margin: '1rem 0rem' }}\n                >\n                  <form >\n                    <div style={{ display: 'flex', margin: '1rem 0rem' }}>\n                      <button\n                        id=\"dropdown-example\"\n                        role=\"button\"\n                        aria-haspopup=\"true\"\n                        aria-expanded=\"false\"\n                        type=\"button\"\n                        className=\"dropdown-toggle btn btn-default\">{NAME}</button>\n                      <input\n                        type=\"search\"\n                        name=\"name\"\n                        // value={this.state.values.name}\n                        onChange={this.handleQueryChange}\n                        role=\"combobox\"\n                        className=\"rbt-input-main form-control rbt-input\"\n                       // placeholder={SEARCH_CONTENT_BY_NAME}\n                       placeholder={this.props.intl.formatMessage({ id: \"app.result\" })}\n                      />\n                    </div>\n                    <div className=\"pull-right mbt10\" style={{ margin: \"0 0 10px 0\" }} >\n                      <button className=\"btn btn-primary\" onClick={this.onContentSearch}><FormattedMessage id=\"app.search\" /></button>\n                    </div>\n                  </form>\n                </div>\n              </Col>\n            </Row>\n            <Row className=\"mt-2\">\n              <Col lg={12}>\n                {this.state.loadingData &&\n                  <Spinner\n                    loading={this.state.loadingData}\n                    className=\"\"\n                    size=\"md\"\n                  ></Spinner>}\n                {!this.state.loadingData && <>\n                  <table className=\"table dataTable table-striped table-bordered table-hover\">\n                    <thead>\n                      <tr>\n                        {Object.keys(T_HEADING).map(el => <th key={el}>{T_HEADING[el]}</th>)}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {this.state.contents.map(content => {\n                        return (\n                          <tr key={content.id}>\n                            <td width=\"5%\" align=\"center\">\n                              {this.radioButton(content)}\n                            </td>\n                            <td role=\"button\" onClick={() => this.open(content)}>{this.fetchTitleOrName(content)}</td>\n                            <td role=\"button\" onClick={() => this.open(content)}>{`${content.createdBy.firstname} ${content.createdBy.lastname}`}</td>\n                            <td role=\"button\" onClick={() => this.open(content)}>{moment(new Date(content.updatedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                            <td role=\"button\" onClick={() => this.open(content)}>{moment(new Date(content.publishedAt)).format(UNIVERSAL_DATE_FORMAT)}</td>\n                          </tr>)\n                      })}\n                    </tbody>\n                  </table>\n                  <div className=\"custom-page\"></div>\n                  <PaginationRow\n                    itemCount={this.state.totalItems}\n                    itemsStart={itemsStart}\n                    itemsEnd={itemsEnd}\n                    viewType=\"table\"\n                    pagination={pagination}\n                    amountOfPages={!this.state.lastPage ? 1 : this.state.lastPage}\n                    pageInputValue={!this.state.currPageWillUpdating ? 1 : this.state.currPageWillUpdating}\n                    onPageSet={this.changePage}\n                    onPerPageSelect={this.onPerPageSelect}\n                    onFirstPage={() => { this.onPageNavigation(1) }}\n                    onPreviousPage={() => { this.onPageNavigation(!this.state.contents.length ? 1 : this.state.page - 1) }}\n                    onPageInput={this.onPageInput}\n                    onNextPage={() => { this.onPageNavigation(this.state.page + 1) }}\n                    onLastPage={() => { this.onPageNavigation(this.state.lastPage) }}\n                    onSubmit={this.onSubmit}\n                    messages={PAGINATION_MESSAGES(this.props)}\n                  />\n                </>}\n              </Col>\n            </Row>\n            <Row className=\"SingleContentConfigFormBody__actionBar row\">\n              <Col sm={9}>\n              </Col>\n              <Col sm={3} className=\"SingleContentConfigFormBody__addButtons\">\n                <Link to=\"/\">\n                  <button className=\"btn-default btn\" onClick={this.cancelHandler}><FormattedMessage id=\"app.cancel\" /></button>\n                  <button className=\"btn-primary btn AddContentTypeFormBody__save--btn\" onClick={this.saveHandler} disabled={saveConfigBtn}><FormattedMessage id=\"app.save\" /></button>\n                </Link>\n              </Col>\n            </Row>\n          </>\n        }\n        <ContentDetailModal show={this.state.show} onHide={this.close} contentDetailsOnModal={this.state.contentDetailsOnModal} contentId={this.state.contentIdForModal} \n          collectionType={this.state.selectedCollectionType && this.state.selectedCollectionType.length && this.state.selectedCollectionType[0].value}\n          fetchTitleOrName={this.fetchTitleOrName} activeTabKey={this.state.activeTabKey} setActiveTabKey={this.setActiveTabKey}/>\n      </Grid>\n    )\n  }\n}\n\nexport default injectIntl(SingleContentList);   ","import React, { Component } from 'react';\nimport { IntlProvider } from \"react-intl\";\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport en from \"./en.js\";\nimport it from \"./it.js\";\nimport Config from './page/Config';\nimport SingleContentList from './page/SingleContentList';\n\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedContentId: 0,\n            selectedTemplateId: 'default',\n            selectedContentName: null,\n            name: '',\n            nameTwo: 'nameTwoVar',\n            collectionType: '',\n            locale:'en',\n        };\n    }\n    componentDidMount = () => {\n        this.setLocale();\n        }\n        \n    // TODO: PBCS-54 ~ Need to verify once the mechanism is implemented by Entando Team \n    componentDidUpdate = (prevProps, prevState) => {\n        if (prevProps.config !== this.props.config) {\n            this.setLocale();\n        }\n    }\n\n    setContent = (data) => {\n        if (data.length) this.setState({ selectedContentId: data[0].id })\n    }\n\n    setSelectedContentName = (contentName) => {\n        this.setState({ selectedContentName: contentName, name: contentName, nameTwo: contentName })\n    }\n\n    setTemplateId = (tempId) => {\n        this.setState({ selectedTemplateId: tempId })\n    }\n\n    setCollectionType = (collType) => {\n        this.setState({ collectionType: JSON.stringify(collType) })\n    }\n\n    setLocale = () => {\n        const currLocale = this.props.config && this.props.config.locale;\n        if (currLocale.length) {\n            this.setState({ locale: currLocale });\n        }\n    }\n\n    decideLocale = locale => {\n        if (locale === 'en') { return en }\n        else if (locale === 'it') { return it };\n    }\n\n    render() {\n        return (\n            <IntlProvider locale={this.state.locale} messages={this.decideLocale(this.state.locale)}>\n                <>\n                    <HashRouter>\n                        <Switch>\n                            <Route path='/' exact>\n                                <Config setTemplateId={this.setTemplateId}\n                                    selectedContentName={this.state.selectedContentName}\n                                    collType={this.state.collectionType}\n                                    selectedContentId={this.state.selectedContentId}\n                                    selectedTemplateId={this.state.selectedTemplateId} />\n                            </Route>\n                            <Route path='/singleconfigpage' exact>\n                                <SingleContentList\n                                    setContent={this.setContent}\n                                    selectedContentName={this.state.selectedContentName}\n                                    setSelectedContentName={this.setSelectedContentName}\n                                    selectedContentId={this.state.selectedContentId}\n                                    setCollectionType={this.setCollectionType}\n                                    collType={this.state.collectionType}\n                                    setTemplateId={this.setTemplateId}\n                                />\n                            </Route>\n                        </Switch>\n                    </HashRouter>\n                </>\n            </IntlProvider>\n        )\n    }\n}\nexport default App; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from '../App';\n\nclass SingleWidgetElement extends HTMLElement {\n    constructor() {\n        super();\n        this.reactRootRef = React.createRef();\n        this.mountPoint = null;\n    }\n\n    #config = {\n        locale: 'en',\n    }\n\n    #updateConfig(value) {\n        this.#config = JSON.parse(value)\n    }\n\n    static get observedAttributes() {\n        return [\"config\"]\n    }\n\n    attributeChangedCallback(name, oldValue, newValue) {\n        this.#updateConfig(newValue)\n        ReactDOM.render(<App ref={this.reactRootRef} config={this.#config} />, this.mountPoint);\n    }\n\n    get config() {\n        return this.reactRootRef.current ? this.reactRootRef.current.state : {};\n    }\n\n    set config(value) {\n        return this.reactRootRef.current.setState(value);\n    }\n\n    connectedCallback() {\n        this.mountPoint = document.createElement('div');\n        this.appendChild(this.mountPoint);\n        ReactDOM.render(<App ref={this.reactRootRef} config={this.#config} />, this.mountPoint);\n    }\n}\n\ncustomElements.get('single-content-widget-config') || customElements.define('single-content-widget-config', SingleWidgetElement);\n\nexport default SingleWidgetElement;\n\n"],"sourceRoot":""}